// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/qrl.proto

package qrl_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicAPIClient is the client API for PublicAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicAPIClient interface {
	GetNodeState(ctx context.Context, in *GetNodeStateReq, opts ...grpc.CallOption) (*GetNodeStateResp, error)
	GetKnownPeers(ctx context.Context, in *GetKnownPeersReq, opts ...grpc.CallOption) (*GetKnownPeersResp, error)
	GetPeersStat(ctx context.Context, in *GetPeersStatReq, opts ...grpc.CallOption) (*GetPeersStatResp, error)
	GetStats(ctx context.Context, in *GetStatsReq, opts ...grpc.CallOption) (*GetStatsResp, error)
	GetAddressState(ctx context.Context, in *GetAddressStateReq, opts ...grpc.CallOption) (*GetAddressStateResp, error)
	GetObject(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectResp, error)
	GetLatestData(ctx context.Context, in *GetLatestDataReq, opts ...grpc.CallOption) (*GetLatestDataResp, error)
	PushTransaction(ctx context.Context, in *PushTransactionReq, opts ...grpc.CallOption) (*PushTransactionResp, error)
	TransferCoins(ctx context.Context, in *TransferCoinsReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetAddressFromPK(ctx context.Context, in *GetAddressFromPKReq, opts ...grpc.CallOption) (*GetAddressFromPKResp, error)
	GetMessageTxn(ctx context.Context, in *MessageTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetTokenTxn(ctx context.Context, in *TokenTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetTransferTokenTxn(ctx context.Context, in *TransferTokenTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetSlaveTxn(ctx context.Context, in *SlaveTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetTransactionsByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetTransactionsByAddressResp, error)
	GetTransaction(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error)
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
	GetOTS(ctx context.Context, in *GetOTSReq, opts ...grpc.CallOption) (*GetOTSResp, error)
	GetHeight(ctx context.Context, in *GetHeightReq, opts ...grpc.CallOption) (*GetHeightResp, error)
	GetBlock(ctx context.Context, in *GetBlockReq, opts ...grpc.CallOption) (*GetBlockResp, error)
	GetBlockByNumber(ctx context.Context, in *GetBlockByNumberReq, opts ...grpc.CallOption) (*GetBlockByNumberResp, error)
}

type publicAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicAPIClient(cc grpc.ClientConnInterface) PublicAPIClient {
	return &publicAPIClient{cc}
}

func (c *publicAPIClient) GetNodeState(ctx context.Context, in *GetNodeStateReq, opts ...grpc.CallOption) (*GetNodeStateResp, error) {
	out := new(GetNodeStateResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetNodeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetKnownPeers(ctx context.Context, in *GetKnownPeersReq, opts ...grpc.CallOption) (*GetKnownPeersResp, error) {
	out := new(GetKnownPeersResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetKnownPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetPeersStat(ctx context.Context, in *GetPeersStatReq, opts ...grpc.CallOption) (*GetPeersStatResp, error) {
	out := new(GetPeersStatResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetPeersStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetStats(ctx context.Context, in *GetStatsReq, opts ...grpc.CallOption) (*GetStatsResp, error) {
	out := new(GetStatsResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetAddressState(ctx context.Context, in *GetAddressStateReq, opts ...grpc.CallOption) (*GetAddressStateResp, error) {
	out := new(GetAddressStateResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetAddressState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetObject(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectResp, error) {
	out := new(GetObjectResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetLatestData(ctx context.Context, in *GetLatestDataReq, opts ...grpc.CallOption) (*GetLatestDataResp, error) {
	out := new(GetLatestDataResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetLatestData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PushTransaction(ctx context.Context, in *PushTransactionReq, opts ...grpc.CallOption) (*PushTransactionResp, error) {
	out := new(PushTransactionResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/PushTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) TransferCoins(ctx context.Context, in *TransferCoinsReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/TransferCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetAddressFromPK(ctx context.Context, in *GetAddressFromPKReq, opts ...grpc.CallOption) (*GetAddressFromPKResp, error) {
	out := new(GetAddressFromPKResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetAddressFromPK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetMessageTxn(ctx context.Context, in *MessageTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetMessageTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTokenTxn(ctx context.Context, in *TokenTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetTokenTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTransferTokenTxn(ctx context.Context, in *TransferTokenTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetTransferTokenTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetSlaveTxn(ctx context.Context, in *SlaveTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetSlaveTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTransactionsByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetTransactionsByAddressResp, error) {
	out := new(GetTransactionsByAddressResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetTransactionsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTransaction(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error) {
	out := new(GetTransactionResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	out := new(GetBalanceResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetOTS(ctx context.Context, in *GetOTSReq, opts ...grpc.CallOption) (*GetOTSResp, error) {
	out := new(GetOTSResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetOTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetHeight(ctx context.Context, in *GetHeightReq, opts ...grpc.CallOption) (*GetHeightResp, error) {
	out := new(GetHeightResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetBlock(ctx context.Context, in *GetBlockReq, opts ...grpc.CallOption) (*GetBlockResp, error) {
	out := new(GetBlockResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetBlockByNumber(ctx context.Context, in *GetBlockByNumberReq, opts ...grpc.CallOption) (*GetBlockByNumberResp, error) {
	out := new(GetBlockByNumberResp)
	err := c.cc.Invoke(ctx, "/qrl.PublicAPI/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicAPIServer is the server API for PublicAPI service.
// All implementations must embed UnimplementedPublicAPIServer
// for forward compatibility
type PublicAPIServer interface {
	GetNodeState(context.Context, *GetNodeStateReq) (*GetNodeStateResp, error)
	GetKnownPeers(context.Context, *GetKnownPeersReq) (*GetKnownPeersResp, error)
	GetPeersStat(context.Context, *GetPeersStatReq) (*GetPeersStatResp, error)
	GetStats(context.Context, *GetStatsReq) (*GetStatsResp, error)
	GetAddressState(context.Context, *GetAddressStateReq) (*GetAddressStateResp, error)
	GetObject(context.Context, *GetObjectReq) (*GetObjectResp, error)
	GetLatestData(context.Context, *GetLatestDataReq) (*GetLatestDataResp, error)
	PushTransaction(context.Context, *PushTransactionReq) (*PushTransactionResp, error)
	TransferCoins(context.Context, *TransferCoinsReq) (*TransferCoinsResp, error)
	GetAddressFromPK(context.Context, *GetAddressFromPKReq) (*GetAddressFromPKResp, error)
	GetMessageTxn(context.Context, *MessageTxnReq) (*TransferCoinsResp, error)
	GetTokenTxn(context.Context, *TokenTxnReq) (*TransferCoinsResp, error)
	GetTransferTokenTxn(context.Context, *TransferTokenTxnReq) (*TransferCoinsResp, error)
	GetSlaveTxn(context.Context, *SlaveTxnReq) (*TransferCoinsResp, error)
	GetTransactionsByAddress(context.Context, *GetTransactionsByAddressReq) (*GetTransactionsByAddressResp, error)
	GetTransaction(context.Context, *GetTransactionReq) (*GetTransactionResp, error)
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error)
	GetOTS(context.Context, *GetOTSReq) (*GetOTSResp, error)
	GetHeight(context.Context, *GetHeightReq) (*GetHeightResp, error)
	GetBlock(context.Context, *GetBlockReq) (*GetBlockResp, error)
	GetBlockByNumber(context.Context, *GetBlockByNumberReq) (*GetBlockByNumberResp, error)
	mustEmbedUnimplementedPublicAPIServer()
}

// UnimplementedPublicAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPublicAPIServer struct {
}

func (UnimplementedPublicAPIServer) GetNodeState(context.Context, *GetNodeStateReq) (*GetNodeStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeState not implemented")
}
func (UnimplementedPublicAPIServer) GetKnownPeers(context.Context, *GetKnownPeersReq) (*GetKnownPeersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnownPeers not implemented")
}
func (UnimplementedPublicAPIServer) GetPeersStat(context.Context, *GetPeersStatReq) (*GetPeersStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeersStat not implemented")
}
func (UnimplementedPublicAPIServer) GetStats(context.Context, *GetStatsReq) (*GetStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedPublicAPIServer) GetAddressState(context.Context, *GetAddressStateReq) (*GetAddressStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressState not implemented")
}
func (UnimplementedPublicAPIServer) GetObject(context.Context, *GetObjectReq) (*GetObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedPublicAPIServer) GetLatestData(context.Context, *GetLatestDataReq) (*GetLatestDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestData not implemented")
}
func (UnimplementedPublicAPIServer) PushTransaction(context.Context, *PushTransactionReq) (*PushTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTransaction not implemented")
}
func (UnimplementedPublicAPIServer) TransferCoins(context.Context, *TransferCoinsReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCoins not implemented")
}
func (UnimplementedPublicAPIServer) GetAddressFromPK(context.Context, *GetAddressFromPKReq) (*GetAddressFromPKResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressFromPK not implemented")
}
func (UnimplementedPublicAPIServer) GetMessageTxn(context.Context, *MessageTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetTokenTxn(context.Context, *TokenTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetTransferTokenTxn(context.Context, *TransferTokenTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferTokenTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetSlaveTxn(context.Context, *SlaveTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlaveTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetTransactionsByAddress(context.Context, *GetTransactionsByAddressReq) (*GetTransactionsByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetTransaction(context.Context, *GetTransactionReq) (*GetTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedPublicAPIServer) GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedPublicAPIServer) GetOTS(context.Context, *GetOTSReq) (*GetOTSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTS not implemented")
}
func (UnimplementedPublicAPIServer) GetHeight(context.Context, *GetHeightReq) (*GetHeightResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeight not implemented")
}
func (UnimplementedPublicAPIServer) GetBlock(context.Context, *GetBlockReq) (*GetBlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedPublicAPIServer) GetBlockByNumber(context.Context, *GetBlockByNumberReq) (*GetBlockByNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (UnimplementedPublicAPIServer) mustEmbedUnimplementedPublicAPIServer() {}

// UnsafePublicAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicAPIServer will
// result in compilation errors.
type UnsafePublicAPIServer interface {
	mustEmbedUnimplementedPublicAPIServer()
}

func RegisterPublicAPIServer(s grpc.ServiceRegistrar, srv PublicAPIServer) {
	s.RegisterService(&PublicAPI_ServiceDesc, srv)
}

func _PublicAPI_GetNodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetNodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetNodeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetNodeState(ctx, req.(*GetNodeStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetKnownPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnownPeersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetKnownPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetKnownPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetKnownPeers(ctx, req.(*GetKnownPeersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetPeersStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeersStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetPeersStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetPeersStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetPeersStat(ctx, req.(*GetPeersStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetStats(ctx, req.(*GetStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetAddressState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetAddressState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetAddressState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetAddressState(ctx, req.(*GetAddressStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetObject(ctx, req.(*GetObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetLatestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetLatestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetLatestData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetLatestData(ctx, req.(*GetLatestDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PushTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PushTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/PushTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PushTransaction(ctx, req.(*PushTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_TransferCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCoinsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).TransferCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/TransferCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).TransferCoins(ctx, req.(*TransferCoinsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetAddressFromPK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressFromPKReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetAddressFromPK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetAddressFromPK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetAddressFromPK(ctx, req.(*GetAddressFromPKReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetMessageTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetMessageTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetMessageTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetMessageTxn(ctx, req.(*MessageTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTokenTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTokenTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetTokenTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTokenTxn(ctx, req.(*TokenTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTransferTokenTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTokenTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTransferTokenTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetTransferTokenTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTransferTokenTxn(ctx, req.(*TransferTokenTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetSlaveTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlaveTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetSlaveTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetSlaveTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetSlaveTxn(ctx, req.(*SlaveTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetTransactionsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTransactionsByAddress(ctx, req.(*GetTransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTransaction(ctx, req.(*GetTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetOTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetOTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetOTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetOTS(ctx, req.(*GetOTSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetHeight(ctx, req.(*GetHeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetBlock(ctx, req.(*GetBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.PublicAPI/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetBlockByNumber(ctx, req.(*GetBlockByNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicAPI_ServiceDesc is the grpc.ServiceDesc for PublicAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qrl.PublicAPI",
	HandlerType: (*PublicAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeState",
			Handler:    _PublicAPI_GetNodeState_Handler,
		},
		{
			MethodName: "GetKnownPeers",
			Handler:    _PublicAPI_GetKnownPeers_Handler,
		},
		{
			MethodName: "GetPeersStat",
			Handler:    _PublicAPI_GetPeersStat_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _PublicAPI_GetStats_Handler,
		},
		{
			MethodName: "GetAddressState",
			Handler:    _PublicAPI_GetAddressState_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _PublicAPI_GetObject_Handler,
		},
		{
			MethodName: "GetLatestData",
			Handler:    _PublicAPI_GetLatestData_Handler,
		},
		{
			MethodName: "PushTransaction",
			Handler:    _PublicAPI_PushTransaction_Handler,
		},
		{
			MethodName: "TransferCoins",
			Handler:    _PublicAPI_TransferCoins_Handler,
		},
		{
			MethodName: "GetAddressFromPK",
			Handler:    _PublicAPI_GetAddressFromPK_Handler,
		},
		{
			MethodName: "GetMessageTxn",
			Handler:    _PublicAPI_GetMessageTxn_Handler,
		},
		{
			MethodName: "GetTokenTxn",
			Handler:    _PublicAPI_GetTokenTxn_Handler,
		},
		{
			MethodName: "GetTransferTokenTxn",
			Handler:    _PublicAPI_GetTransferTokenTxn_Handler,
		},
		{
			MethodName: "GetSlaveTxn",
			Handler:    _PublicAPI_GetSlaveTxn_Handler,
		},
		{
			MethodName: "GetTransactionsByAddress",
			Handler:    _PublicAPI_GetTransactionsByAddress_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _PublicAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _PublicAPI_GetBalance_Handler,
		},
		{
			MethodName: "GetOTS",
			Handler:    _PublicAPI_GetOTS_Handler,
		},
		{
			MethodName: "GetHeight",
			Handler:    _PublicAPI_GetHeight_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _PublicAPI_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _PublicAPI_GetBlockByNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/qrl.proto",
}

// AdminAPIClient is the client API for AdminAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAPIClient interface {
}

type adminAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAPIClient(cc grpc.ClientConnInterface) AdminAPIClient {
	return &adminAPIClient{cc}
}

// AdminAPIServer is the server API for AdminAPI service.
// All implementations must embed UnimplementedAdminAPIServer
// for forward compatibility
type AdminAPIServer interface {
	mustEmbedUnimplementedAdminAPIServer()
}

// UnimplementedAdminAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAdminAPIServer struct {
}

func (UnimplementedAdminAPIServer) mustEmbedUnimplementedAdminAPIServer() {}

// UnsafeAdminAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAPIServer will
// result in compilation errors.
type UnsafeAdminAPIServer interface {
	mustEmbedUnimplementedAdminAPIServer()
}

func RegisterAdminAPIServer(s grpc.ServiceRegistrar, srv AdminAPIServer) {
	s.RegisterService(&AdminAPI_ServiceDesc, srv)
}

// AdminAPI_ServiceDesc is the grpc.ServiceDesc for AdminAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qrl.AdminAPI",
	HandlerType: (*AdminAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/qrl.proto",
}
